//======================================== -*-tab-width:4-*- ==========//
/*!	@file
	@brief	リソース・クラス（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#ifndef RESOURCE_HPP
#define RESOURCE_HPP
#include <iostream>
#include <string>
#include "pngio.hpp"
#include "glmobj.hpp"
#include "sound.hpp"

namespace core {

	enum {
		SE_PIN,
		SE_JII,
		SE_DISTOTION,
		SE_PIRIN,
		SE_PORIN,
		SE_PURIN,
		SE_DISTOTION_W,
	};

	enum {
		SE_GRP_A,
		SE_GRP_B,
		SE_GRP_C,
		SE_GRP_D,
		SE_GRP_E,
		SE_GRP_F,
		SE_GRP_G,
		SE_GRP_H,
		SE_GRP_I
	};

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	メニュー・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class resource {

		img::pngio		m_png;
		al::sound		m_sound;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		resource() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~resource() { destroy(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
		 */
		//-----------------------------------------------------------------//
		void initialize();


		//-----------------------------------------------------------------//
		/*!
			@brief	モーション・オブジェクトを作成してハンドルを返す
			@param[in]	mobj	glmobj を渡す。
			@param[in]	base_name	ベース名
			@return	glmobj のハンドル
		 */
		//-----------------------------------------------------------------//
		gl::glmobj::handle create_mobj(gl::glmobj& mobj, const char* base_name);


		//-----------------------------------------------------------------//
		/*!
			@brief	効果音リクエスト
			@param[in]	group	発音グループ
			@param[in]	se_no	発音番号
			@param[in]	loop	ループ
			@return 正常なら「true」
		 */
		//-----------------------------------------------------------------//
		bool request(int group, int se_no, bool loop = false) { return m_sound.request(group, se_no, loop); }


		void play_bgm(const char* filename) { m_sound.play_stream(filename); }


		void service() { m_sound.service(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	廃棄
		 */
		//-----------------------------------------------------------------//
		void destroy();

	};


	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	リソースジュールの生成
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	void create_resource();


	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	リソースモジュールを返す
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	core::resource* get_resource();


	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	リソースモジュールの廃棄
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	void destroy_resource();
}

#endif	// RESOURCE_HPP
