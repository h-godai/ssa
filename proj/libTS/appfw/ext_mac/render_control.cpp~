// -*-tab-width:4-*-
// render_control.cpp

#include <stdio.h>
#include "ios_control.hpp"

#include <OpenGLES/ES1/gl.h>
#include <OpenGLES/ES1/glext.h>

#include "../drawframe_app.hpp"

namespace ts {
namespace appfw {
namespace ios {

  struct render_control_ios : render_control {
    GLuint framebuffer_;
    GLuint renderbuffer_;
    double time_stamp_;
	float scale_factor_;
    
    render_control_ios() {
      glGenRenderbuffersOES(1, &renderbuffer_);
      glBindRenderbufferOES(GL_RENDERBUFFER_OES, renderbuffer_);
    }
    
  
    virtual void initialize(uint32_t width, uint32_t height, float scf=1.0f) {

      // initialize for OpenGL
	  width *= scf;
	  height *= scf;

      glGenFramebuffersOES(1, &framebuffer_);
      glBindFramebufferOES(GL_FRAMEBUFFER_OES, framebuffer_);

      glFramebufferRenderbufferOES(GL_FRAMEBUFFER_OES
                                   , GL_COLOR_ATTACHMENT0_OES
                                   , GL_RENDERBUFFER_OES
                                   , renderbuffer_);
      
      glViewport(0, 0, width, height);
	  scale_factor_ = scf;
	  // iPhine3GS以前の解像度の場合は仮想的に４倍にする　
	  if (width <= 320 || height <= 320) {
		width *= 2;
		height *= 2;
		scale_factor_ = 2.0f;
	  }
	  drawframe_app::app_instance().tap_device_scale_factor_ = scale_factor_;
	  drawframe_app::app_instance().gr_.initialize(width, height, scale_factor_);
    }
    
    virtual void render(double timestamp) const {
	  drawframe_app::app_instance().draw_frame_hook(timestamp);
    }
    
    virtual void update_animation(double time_stamp) {
      //printf("update_animation %f\n", time_stamp);
    }
    virtual void on_rotate(device_orientation orientation) {
      TS_DEBUGLOG("on_rotate(%d)\n", orientation);
	  switch (orientation) {
	  default:
	  case unknown_orientation:
	  case orientation_portrait:               // angle=0
	  case orientation_faceup:                 // angle=0
	  case orientation_facedown:               // angle=0
		drawframe_app::app_instance().on_device_rotate(0.0f);
		break;
	  case orientation_portrait_upside_down:   // angle=180
		drawframe_app::app_instance().on_device_rotate(180.0f);
		break;
	  case orientation_landscape_left:         // angle=270
		drawframe_app::app_instance().on_device_rotate(270.0f);
		break;
	  case orientation_landscape_right:        // angle=90
		drawframe_app::app_instance().on_device_rotate(90.0f);
		break;
	  }
    }
 };
  

  render_control::ptr render_control_factory::create(uint32_t) {
    return new render_control_ios();
  }
  
  
  
}}}// ts::appfw::ios

