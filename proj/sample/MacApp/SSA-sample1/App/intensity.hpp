#ifndef INTENSITY_HPP
#define INTENSITY_HPP
//=====================================================================//
/*!	@file
	@brief	Intensity（強度[輝度]）クラス（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <iostream>
#include <vector>
#include "gl_info.hpp"
#include "IGLcore.hpp"
#include "img.hpp"

namespace gl {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	intensity クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class intensity {

		float	m_inten_min;
		float	m_inten_max;
		float	m_frame_rate;

		float	m_inten_level;
		float	m_speed;
		float	m_cycle_shade_level;
		float	m_cycle_shade_speed;

		unsigned int	m_flash_count;
		img::rgba8		m_flash_color;

		bool	m_into_min;
		bool	m_into_max;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		intensity() : m_inten_min(0.0f), m_inten_max(1.0f), m_frame_rate(0.0f),
					  m_inten_level(0.0f), m_speed(0.0f), m_cycle_shade_level(0.0f), m_cycle_shade_speed(0.0f),
					  m_flash_count(0),
					  m_into_min(false), m_into_max(false) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~intensity() { destroy(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
			@param[in]	rate	フレームレートを設定[Hz]
		 */
		//-----------------------------------------------------------------//
		void initialize(float rate);


		//-----------------------------------------------------------------//
		/*!
			@brief	初期値と速度の設定
			@param[in]	first	輝度の初期値（0.0 to 1.0)
			@param[in]	limit	輝度の最終値（0.0 to 1.0)
			@param[in]	time	輝度変化の速度
		 */
		//-----------------------------------------------------------------//
		void set_level_time(float first, float limit, float time);


		//-----------------------------------------------------------------//
		/*!
			@brief	サイクル・シェードの速度を設定する
			@param[in]	speed	速度（0.0 to 1.0)
		 */
		//-----------------------------------------------------------------//
		void set_cycle_shade_speed(float speed) { m_cycle_shade_speed = speed; }


		//-----------------------------------------------------------------//
		/*!
			@brief	毎フレームサービス
		 */
		//-----------------------------------------------------------------//
		void service();


		//-----------------------------------------------------------------//
		/*!
			@brief	輝度レベルの取得（0.0 to 1.0）
			@return 輝度レベル
		 */
		//-----------------------------------------------------------------//
		float get_intensity() const { return m_inten_level; }


		//-----------------------------------------------------------------//
		/*!
			@brief	輝度レベルの判定
			@return	「最小」になったら「true」を返す
		 */
		//-----------------------------------------------------------------//
		bool is_min() const { return m_into_min; }


		//-----------------------------------------------------------------//
		/*!
			@brief	輝度レベルの判定
			@return	「最大」になったら「true」を返す
		 */
		//-----------------------------------------------------------------//
		bool is_max() const { return m_into_max; }


		//-----------------------------------------------------------------//
		/*!
			@brief	輝度レベルの判定
			@return	「最小」か「最大」になったら「true」を返す
		 */
		//-----------------------------------------------------------------//
		bool is_min_max() const { if(m_into_min || m_into_max) return true; else return false; }


		//-----------------------------------------------------------------//
		/*!
			@brief	輝度レベルで変調されたカラーの設定
			@param[in]	c	基準カラー
		 */
		//-----------------------------------------------------------------//
		void set_inten(const img::rgbaf& c) {
			img::rgbaf sc;
			sc = c * m_inten_level;
			::glColor4f(sc.r, sc.g, sc.b, sc.a);
//			printf("%f\n", m_inten_level);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	輝度レベルで変調されたカラーの設定
			@param[in]	c	基準カラー
		 */
		//-----------------------------------------------------------------//
		void set_cycle_shade(const img::rgbaf& c) {
			img::rgbaf sc;
			sc = c * m_inten_level;
			sc *= m_cycle_shade_level;
			::glColor4f(sc.r, sc.g, sc.b, sc.a);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	フラッシュ・カラー・アニメーションによるカラー設定
		 */
		//-----------------------------------------------------------------//
		void set_flash() {
			img::rgbaf c;
			c = m_flash_color;
			img::rgbaf sc;
			sc = c * m_inten_level;
			::glColor4f(sc.r, sc.g, sc.b, sc.a);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	廃棄
		 */
		//-----------------------------------------------------------------//
		void destroy();

	};

}
#endif
